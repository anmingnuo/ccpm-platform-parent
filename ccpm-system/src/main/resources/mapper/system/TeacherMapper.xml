<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.zut.chz.system.mapper.TeacherMapper">
    
    <resultMap type="Teacher" id="TeacherResult">
        <result property="id"    column="id"    />
        <result property="userName"    column="user_name"    />
        <result property="password"    column="password"    />
        <result property="nickName"    column="nick_name"    />
        <result property="gender"    column="gender"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectTeacherVo">
        select id, user_name, password, nick_name, gender, create_time, update_time from teacher
    </sql>

    <select id="selectTeacherList" parameterType="Teacher" resultMap="TeacherResult">
        <include refid="selectTeacherVo"/>
        <where>  
            <if test="userName != null  and userName != ''"> and user_name like concat('%', #{userName}, '%')</if>
            <if test="password != null  and password != ''"> and password = #{password}</if>
            <if test="nickName != null  and nickName != ''"> and nick_name like concat('%', #{nickName}, '%')</if>
            <if test="gender != null  and gender != ''"> and gender = #{gender}</if>
        </where>
    </select>
    
    <select id="selectTeacherById" parameterType="Long" resultMap="TeacherResult">
        <include refid="selectTeacherVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertTeacher" parameterType="Teacher" useGeneratedKeys="true" keyProperty="id">
        insert into teacher
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null and userName != ''">user_name,</if>
            <if test="password != null and password != ''">password,</if>
            <if test="nickName != null">nick_name,</if>
            <if test="gender != null">gender,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null and userName != ''">#{userName},</if>
            <if test="password != null and password != ''">#{password},</if>
            <if test="nickName != null">#{nickName},</if>
            <if test="gender != null">#{gender},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateTeacher" parameterType="Teacher">
        update teacher
        <trim prefix="SET" suffixOverrides=",">
            <if test="userName != null and userName != ''">user_name = #{userName},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="nickName != null">nick_name = #{nickName},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteTeacherById" parameterType="Long">
        delete from teacher where id = #{id}
    </delete>

    <delete id="deleteTeacherByIds" parameterType="String">
        delete from teacher where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>